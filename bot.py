import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
from database import (
    create_tables,
    generate_expense_pie_chart,
    register_user,
    add_expense,
    add_income,
    get_last_transaction,
    get_user_balance,
    get_report_data,
    get_category_keyboard,
)
from waiting_confirmation import DeleteTransactionState, process_confirmation
from keyboard import (
    get_back_keyboard,
    get_confirm_keyboard,
    get_main_menu_keyboard,
    get_report_keyboard,
    get_income_expense_keyboard,
    get_time_period_keyboard,
)


load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()


class AddTransactionState(StatesGroup):
    waiting_for_amount_and_category = State()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    await register_user(user_id, username, first_name, last_name)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard(),
    )


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def start_add_expense(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞."""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –ü—Ä–æ–¥—É–∫—Ç—ã)",
        reply_markup=get_back_keyboard(),
    )
    await state.update_data(
        transaction_type="expense"
    )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥
    await state.set_state(AddTransactionState.waiting_for_amount_and_category)


@dp.message(F.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def start_add_income(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞."""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –ó–∞—Ä–ø–ª–∞—Ç–∞)",
        reply_markup=get_back_keyboard(),
    )
    await state.update_data(
        transaction_type="income"
    )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∞–∫ –¥–æ—Ö–æ–¥
    await state.set_state(AddTransactionState.waiting_for_amount_and_category)


@dp.message(lambda message: message.text == "‚öñÔ∏è –ë–∞–ª–∞–Ω—Å")
async def cmd_summary(message: Message):
    user_id = message.from_user.id

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database.py –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ
    total_income, total_expense, balance = await get_user_balance(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º
    balance_message = (
        f"‚öñÔ∏è *–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:*\n\n"
        f"üí∞ *–î–æ—Ö–æ–¥—ã*: {total_income} —Ä—É–±.\n"
        f"üí∏ *–†–∞—Å—Ö–æ–¥—ã*: {total_expense} —Ä—É–±.\n"
        f"üßæ *–ë–∞–ª–∞–Ω—Å*: {balance} —Ä—É–±."
    )
    await message.answer(
        balance_message, parse_mode="Markdown", reply_markup=get_main_menu_keyboard()
    )


@dp.message(AddTransactionState.waiting_for_amount_and_category)
async def process_transaction_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ –∏–ª–∏ –¥–æ—Ö–æ–¥–∞."""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_keyboard())
        await state.clear()
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer(
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –ü—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ 500 –ó–∞—Ä–ø–ª–∞—Ç–∞)"
        )
        return

    try:
        amount = float(args[0])
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        category_name = " ".join(args[1:])
        if not category_name.strip():
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
            return
        if category_name.isdigit():
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        transaction_type = (await state.get_data()).get("transaction_type")

        if transaction_type == "expense":
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥
            await add_expense(message.from_user.id, amount, category_name)
            await message.answer(
                f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {amount} —Ä—É–±. –Ω–∞ {category_name}",
                reply_markup=get_main_menu_keyboard(),
            )
        elif transaction_type == "income":
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥
            await add_income(message.from_user.id, amount, category_name)
            await message.answer(
                f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {amount} —Ä—É–±. –Ω–∞ {category_name}",
                reply_markup=get_main_menu_keyboard(),
            )

        await state.clear()
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞! –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –ü—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ 500 –ó–∞—Ä–ø–ª–∞—Ç–∞)"
        )


@dp.message(DeleteTransactionState.waiting_for_confirmation)
async def process_confirmation_handler(message: Message, state: FSMContext):
    await process_confirmation(message, state)


@dp.message(lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
async def cmd_delete_last_transaction(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    last_transaction = (await get_last_transaction(message.from_user.id, 1))[0]

    if last_transaction:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_info = f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {last_transaction['type']}, {last_transaction['category_name']} –Ω–∞ {last_transaction['amount']} —Ä—É–±. ({last_transaction['created_at'].strftime('%Y-%m-%d %H:%M:%S')})\n–£–¥–∞–ª–∏—Ç—å? (–î–∞/–ù–µ—Ç)"
        await message.answer(transaction_info, reply_markup=get_confirm_keyboard())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        await state.update_data(last_transaction=last_transaction)

        await state.set_state(DeleteTransactionState.waiting_for_confirmation)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


@dp.message(lambda message: message.text == "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
async def cmd_get_five_last_transactions(message: Message):
    five_last = await get_last_transaction(message.from_user.id, 5)
    info = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"

    for row in five_last:
        info += f"üí∞ {row['type']} | {row['amount']} —Ä—É–±. | {row['category_name']} | {row['created_at'].strftime('%Y-%m-%d %H:%M')}\n"

    await message.answer(info, reply_markup=get_main_menu_keyboard())


@dp.message(lambda message: message.text == "üí∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_report(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_report_keyboard(),
    )


@dp.callback_query(lambda callback: callback.data.startswith("report_"))
async def process_report(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    days = 7 if callback.data == "report_week" else 30
    report_data = await get_report_data(user_id, days)

    if report_data:
        report_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:\n\n"
        for row in report_data:
            type_emoji = "üí∞" if row["type"] == "Income" else "üí∏"
            report_message += (
                f"{type_emoji} {row['type']}: {row['total_amount']} —Ä—É–±.\n"
            )
        await callback.message.edit_text(report_message)
    else:
        await callback.message.edit_text(
            "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        )

    await callback.answer()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è


class ReportStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_period = State()


@dp.message(lambda message: message.text == "üìä –û—Ç—á–µ—Ç")
async def cmd_report(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_income_expense_keyboard(),
    )


@dp.callback_query(lambda callback: callback.data in ["Income", "Expense"])
async def process_income_expense(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    type_ = callback.data

    # Save the type in FSM storage
    await state.update_data(type=type_)
    await state.set_state(ReportStates.waiting_for_category)

    # Show categories
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=await get_category_keyboard(user_id, type_)
    )
    await callback.answer()


@dp.callback_query(
    lambda callback: callback.data.startswith("Income_")
    or callback.data.startswith("Expense_")
)
async def process_category(callback: types.CallbackQuery, state: FSMContext):
    type_, category = callback.data.split("_", 1)

    # Save the category
    await state.update_data(category=category)
    await state.set_state(ReportStates.waiting_for_period)

    # Show time period options
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=get_time_period_keyboard()
    )
    await callback.answer()


@dp.callback_query(lambda callback: callback.data in ["week", "month"])
async def process_time_period(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    period = callback.data

    # Get the stored data
    data = await state.get_data()
    type_ = data.get("type")
    category = data.get("category")

    days = 7 if period == "week" else 30
    report_data = await get_report_data(user_id, type_, category, days)

    # Format report
    report_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n"
    )
    if report_data:
        for row in report_data:
            type_emoji = "üí∞" if row["type"] == "Income" else "üí∏"
            report_message += (
                f"{type_emoji} {row['type']}: {row['total_amount']} —Ä—É–±.\n"
            )
    else:
        report_message += "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥."

    await callback.message.edit_text(report_message)
    await callback.answer()
    await state.clear()


@dp.message(lambda message: message.text == "üìà –ì—Ä–∞—Ñ–∏–∫")
async def cmd_chart(message: types.Message):
    user_id = message.from_user.id
    chart_file = await generate_expense_pie_chart(user_id)

    if not chart_file:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
    photo = FSInputFile(chart_file)
    await message.answer_photo(photo)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(chart_file)


async def main():
    await create_tables()
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
